# .github/actions/vcpkg-setup/action.yml

name: vcpkg-setup
description: Action to clone and bootstrap vcpkg with caching.

inputs:
  token:
    description: "GitHub token to authenticate API requests. Recommended to use: <github.token>"
    required: true
    default: ''
  revision:
    description: "vcpkg revision to checkout. Can be a commit hash, tag, or branch name."
    required: false
    default: ''
  fetch-depth:
    description: "Fetch depth for vcpkg checkout. Set to 0 for full history if using a commit hash."
    required: false
    default: 1
    type: number
  install-dir:
    description: "Relative directory to install vcpkg. Defaults to 'vcpkg'."
    required: false
    default: 'vcpkg'
  runner-os:
    description: "Operating system as given by <runner.os>. Must be specified."
    required: true
  cache-key:
    description: "Cache key used to restore the vcpkg repository."
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Validate Required Inputs
      shell: bash
      run: |
        if [[ -z "${{ inputs.runner-os }}" ]]; then
          echo "Error: runner-os must be specified (e.g., 'Linux', 'Windows')" >&2
          exit 1
        fi
        
    - name: Set Common Variables
      shell: bash
      run: |
        # Ensure install-dir is relative
        if [[ "${{ inputs.install-dir }}" == /* ]]; then
          echo "Error: install-dir must be a relative path within the workspace." >&2
          exit 1
        fi
        echo "VCPKG_ROOT=${{ github.workspace }}/${{ inputs.install-dir }}" >> $GITHUB_ENV
        
    - name: Determine Checkout Revision and Fetch Depth
      id: determine-checkout-revision
      shell: bash
      run: |
        if [[ -n "${{ inputs.revision }}" ]]; then
          revision="${{ inputs.revision }}"
        
          # Check if the revision is a 40-character hexadecimal commit hash
          if [[ "$revision" =~ ^[0-9a-f]{40}$ ]]; then
            echo "vcpkg_revision=$revision" >> $GITHUB_OUTPUT
            echo "fetch_depth=0" >> $GITHUB_OUTPUT
          else
            echo "vcpkg_revision=$revision" >> $GITHUB_OUTPUT
            echo "fetch_depth=${{ inputs.fetch-depth }}" >> $GITHUB_OUTPUT
          fi
        else
          # Try to fetch the latest release tag using GitHub API with jq
          if command -v jq >/dev/null 2>&1; then
            latest_release=$(curl -s -H "Authorization: token ${{ inputs.token }}" https://api.github.com/repos/microsoft/vcpkg/releases/latest | jq -r .tag_name)
            if [ -z "$latest_release" ] || [ "$latest_release" == "null" ]; then
              # Fallback to a known stable version if API call fails
              echo "Warning: Could not determine latest release tag, using default stable version." >&2
              latest_release="2023.10.19"
            fi
          else
            # Fallback for environments without jq
            echo "Warning: jq not available, using default stable version." >&2
            latest_release="2023.10.19"
          fi
          echo "vcpkg_revision=$latest_release" >> $GITHUB_OUTPUT
          echo "fetch_depth=${{ inputs.fetch-depth }}" >> $GITHUB_OUTPUT
        fi

    - name: Cache vcpkg Repository
      uses: actions/cache@v3
      id: cache-vcpkg-repo
      with:
        path: ${{ env.VCPKG_ROOT }}
        key: vcpkg-repo-${{ steps.determine-checkout-revision.outputs.vcpkg_revision }}-${{ inputs.cache-key }}-${{ inputs.runner-os }}

    - name: Restore vcpkg Repository from Cache
      if: steps.cache-vcpkg-repo.outputs.cache-hit != 'true'
      run: echo "Cache miss for vcpkg repository. Proceeding to clone and bootstrap."
      shell: bash

    - name: Checkout vcpkg
      if: steps.cache-vcpkg-repo.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: microsoft/vcpkg
        ref: '${{ steps.determine-checkout-revision.outputs.vcpkg_revision }}'
        path: ${{ inputs.install-dir }}  # Relative path
        fetch-depth: ${{ steps.determine-checkout-revision.outputs.fetch_depth }}
        token: ${{ inputs.token }}

    - name: Bootstrap vcpkg
      if: steps.cache-vcpkg-repo.outputs.cache-hit != 'true'
      working-directory: ${{ env.VCPKG_ROOT }}
      shell: bash
      run: |
        if [[ "${{ inputs.runner-os }}" == "Windows" ]]; then
          # Windows needs cmd to run batch files
          cmd "/c bootstrap-vcpkg.bat -disableMetrics"
        elif [[ "${{ inputs.runner-os }}" == "Linux" ]] || [[ "${{ inputs.runner-os }}" == "macOS" ]]; then
          # Linux/macOS uses the shell script
          ./bootstrap-vcpkg.sh -disableMetrics
        else
          echo "Error: Unsupported runner OS: ${{ inputs.runner-os }}. Must be 'Windows', 'Linux', or 'macOS'." >&2
          exit 1
        fi

    - name: Setup Environment
      shell: bash
      run: |
        if [[ "${{ inputs.runner-os }}" == "Windows" ]]; then
          # Windows path handling
          echo "${{ env.VCPKG_ROOT }}\\vcpkg" >> $GITHUB_PATH
          # Set additional Windows-specific environment variables
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV
          echo "VCPKG_INSTALLATION_ROOT=${{ env.VCPKG_ROOT }}" >> $GITHUB_ENV
        elif [[ "${{ inputs.runner-os }}" == "Linux" ]] || [[ "${{ inputs.runner-os }}" == "macOS" ]]; then
          # Unix-style paths
          echo "${{ env.VCPKG_ROOT }}/vcpkg" >> $GITHUB_PATH
          echo "VCPKG_INSTALLATION_ROOT=${{ env.VCPKG_ROOT }}" >> $GITHUB_ENV
        else
          echo "Error: Unsupported runner OS: ${{ inputs.runner-os }}. Must be 'Windows', 'Linux', or 'macOS'." >&2
          exit 1
        fi
